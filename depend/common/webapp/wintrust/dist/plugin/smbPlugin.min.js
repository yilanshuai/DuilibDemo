SMBPlugin.PROGRAM_TYPE = {
    DRIVER: 1,
    PLUGIN: 2
};

SMBPlugin.CRET_TYPE = {
    RSA: 1,
    SM2: 2
};

SMBPlugin.EVENT_TYPE ={
    INJECT: 1,
    EJECT: 2
};

function SMBPlugin(id) {
    let pluginObj = document.createElement("embed");
    pluginObj.setAttribute("type", "application/x-wtsmb");
    pluginObj.setAttribute("id", id);
    pluginObj.setAttribute("width", 0);
    pluginObj.setAttribute("height", 0);
    document.body.appendChild(pluginObj);

    let keyInjectListeners = [];
    let keyEjectListeners = [];

    pluginObj.onUKeyOn = function (resp) {
        for (let i = 0; i < keyInjectListeners.length; i++) {
            keyInjectListeners[i].call(SMBPlugin);
        }
    };

    pluginObj.onUKeyOff = function (resp) {
        for (let i = 0; i < keyEjectListeners.length; i++) {
            keyEjectListeners[i].call(SMBPlugin);
        }
    };

    pluginObj.addListenerSync();

    this.plguin = pluginObj;
    this.keyInjectListeners = keyInjectListeners;
    this.keyEjectListeners = keyEjectListeners;
    this.deviceCertData = [];
}

SMBPlugin.prototype.addListener = function (event, callback) {
    if (SMBPlugin.EVENT_TYPE.INJECT === event) {
        this.keyInjectListeners.push(callback);
    }
    else if (SMBPlugin.EVENT_TYPE.EJECT === event) {
        this.keyEjectListeners.push(callback);
    }
};

SMBPlugin.prototype.removeListener = function (event, callback) {
    let listeners = event === "keyInject" ? this.keyInjectListeners : this.keyEjectListeners;
    for (let i = 0; i < listeners.length; i++) {
        if (listeners[i] === callback) {
            listeners.slice(i, 1);
        }
    }
};

SMBPlugin.prototype.showCertificate = function (cret) {
    if (!cret["certContentB64String"]) {
        return;
    }

    this.plguin.showCert(cret["certContentB64String"]);
};

SMBPlugin.prototype.readCertInfo = function (callback) {
    this.plguin.readUkeyCertInfo(function (resp) {
        callback.call(this, JSON.parse(resp));
    })
};

SMBPlugin.prototype.verifyPassword = function (deviceData, password, callback) {
    this.plguin.verifyDevPassword(deviceData, password, callback);
};

SMBPlugin.prototype.changePassword = function (deviceData, oldPassword, password, callback) {
    this.plguin.changeUkeyPassword(deviceData, oldPassword, password, function (resp) {
        callback.call(this, JSON.parse(resp));
    });
};

SMBPlugin.prototype.installCertificate = function (path, type, callback) {
    if (SMBPlugin.CRET_TYPE.RSA === type) {
        SMBPlugin.prototype.installRSACertificate(path, callback);
    }
    else if (SMBPlugin.CRET_TYPE.SM2 === type) {
        SMBPlugin.prototype.installSM2Certificate(path, callback);
    }
};

SMBPlugin.prototype.installRSACertificate = function (path, callback) {
    this.plguin.installCaCertRSA(path, function (resp) {
        callback.call(this, JSON.parse(resp));
    });
};

SMBPlugin.prototype.installSM2Certificate = function (path, callback) {
    this.plguin.installCaCertSM2(path, function (resp) {
        callback.call(this, JSON.parse(resp));
    });
};

// TODO::
SMBPlugin.prototype.getCertificate = function (property, value, callback) {
    function foundCertificate(certData, callback) {
        let cert = false;

        for (let i =0; i < certData.length; i++) {
            let certs = certData[i]["certs"];

            for (let j = 0; i < certs.length; j++) {
                if (certs[j][property] === value) {
                    cert = certs[j];

                    break;
                }
            }

            if (cert) break;
        }

        if (this.deviceCertData.length > 0) {
            foundCertificate()
        }
        else {

        }
    }
};

SMBPlugin.prototype.detectSystem = function () {
    return JSON.parse(this.plguin.detectSystem());
};

SMBPlugin.prototype.detectAntivirus = function () {
    return JSON.parse(this.plguin.detectAntivirus());
};

SMBPlugin.prototype.detectFirewall = function () {
    return JSON.parse(this.plguin.detectFireWall());
};

SMBPlugin.prototype.detectHost = function (host, callback) {
    this.plguin.detectHost(host, function (resp) {
        callback.call(this, JSON.parse(resp));
    });
};

SMBPlugin.prototype.detectBankWebsite = function (url, path, port, callback) {
    this.plguin.detectBankWebsite(url, path, port, function (resp) {
        callback.call(this, JSON.parse(resp));
    });
};

SMBPlugin.prototype.detectWebsiteWithTimeout = function (url, path, port, timeout, callback) {
    this.plguin.detectWebsiteWithTimeout(url, path, port, timeout, function (resp) {
        callback.call(this, JSON.parse(resp));
    });
};

SMBPlugin.prototype.detectCertChain = function (cert, type, callback) {
    this.plguin.checkCertChain(cert, type, function (resp) {
        callback.call(this, JSON.parse(resp));
    });
};

SMBPlugin.prototype.detectSKFDriver = function (name, callback) {
    this.plguin.listSKFDriver(name, function (resp) {
        callback.call(this, JSON.parse(resp));
    });
};

SMBPlugin.prototype.detectCSPDriver = function (name, callback) {
    this.plguin.listCSPDriver(name, function (resp) {
        callback.call(this, JSON.parse(resp));
    });
};

SMBPlugin.prototype.detectNavigatorPlugins = function (name) {
    name = name.toLowerCase();

    for (let i = 0; i < navigator.plugins.length; i++) {
        if (navigator.plugins[i].name.toLowerCase().indexOf(name) > -1) {
            return true;
        }
    }

    return false;
};

SMBPlugin.prototype.repairApplication = function (path, args, type, callback) {
    this.plguin.installApp(path, args, type, function (resp) {
        callback.call(this, JSON.parse(resp));
    });
};

SMBPlugin.prototype.repairHostFile = function (domain, callback) {
    this.plguin.repairHostFile(domain, function (resp) {
        callback.call(this, JSON.parse(resp));
    });
};