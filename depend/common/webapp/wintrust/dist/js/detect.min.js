$(function () {
    let pluginObj = null;
    let interval = null;
    let isRunning = false;
    let repairCount = 0;
    let normalCount = [];
    let warningCount = [];
    let dangerCount = [];
    let detectQueue = [];
    let repairQueue = [];
    let repairPluginList = [];
    let repairDriverList = [];

    const detectItems = {
        "SYSTEM": 0,
        "ANTIVIRUS": 1,
        "FIREWALL": 2,
        "HOST": 3,
        "WEBSITE": 4,
        "UKEY_DRIVER": 5,
        "PLUGINS": 6
    };

    $('#btn-minimize').click(function () {
        common.Minimize();
    });

    $('#btn-close').click(function () {
        common.Close();
    });

    function initSMBPlugin() {
        let id = pluginObj ? pluginObj.id : 'secure-plugin';
        $('#' + id).remove();
        pluginObj = new SMBPlugin(id);
    }

    var filePath;

    function addDetectTask(name, handler) {
        let task = {
            title: name,
            started: false,
            finished: false,
            displayed: false,
            result: handler
        };

        detectQueue.push(task);

        return task;
    }

    function addRepairTask(name, handler) {
        let task = {
            title: name,
            started: false,
            finished: false,
            displayed: false,
            result: handler
        };

        repairQueue.push(task);

        return task;
    }

    function addNormalResult(id, title, callback) {
        if (!isRunning) return;

        normalCount.push(id);

        let html = $('<li class="detect-item-' + id + ' clearfix">' + title + '<a class="btn btn-xs btn-success pull-right disabled" role="button">正常</a></li>');

        if (callback) {
            html.append('<a class="btn btn-xs btn-info pull-right">详情</a>');
            html.find(".btn-info").click(callback);
        }

        $(".normal-title span").text(normalCount.length);
        html.hide().appendTo($(".normal-list")).slideDown("slow");
    }

    function addWarningResult(id, title, callback) {
        if (!isRunning) return;

        warningCount.push(id);

        let html = $('<li class="detect-item-' + id + ' clearfix">' + title + '<a class="btn btn-xs btn-warning pull-right disabled" role="button">警告</a></li>');

        if (callback) {
            html.append('<a class="btn btn-xs btn-info pull-right">详情</a>');
            html.find(".btn-info").click(callback);
        }

        $(".warning-title span").text(warningCount.length);
        html.hide().appendTo($(".warning-list")).slideDown("slow");
    }

    function addDangerResult(id, title, callback) {
        if (!isRunning) return;

        dangerCount.push(id);

        let html = $('<li class="detect-item-' + id + ' clearfix">' + title + '<a class="btn btn-xs btn-danger pull-right disabled" role="button">异常</a></li>');

        if (callback) {
            html.append('<a class="btn btn-xs btn-info pull-right">详情</a>');
            html.find(".btn-info").click(callback);
        }

        $(".danger-title span").text(dangerCount.length);
        html.hide().appendTo($(".danger-list")).slideDown("slow");
    }

    function detectSystemInfo() {
        let result = pluginObj.detectSystem();

        let task = addDetectTask("操作系统", function () {
            if (result['success']) {
                addNormalResult(detectItems.SYSTEM, "系统版本：" + result["sysinfo"]);
            } else {
                addWarningResult(detectItems.SYSTEM, "系统版本：检测失败");
            }
        });

        task.finished = true;
    }

    function detectAntivirus() {
        let result = pluginObj.detectAntivirus();

        let task = addDetectTask("杀毒软件", function () {
            if (result['success']) {
                addNormalResult(detectItems.ANTIVIRUS, "杀毒软件：" + result["product_name"]);
            } else {
                addWarningResult(detectItems.ANTIVIRUS, "杀毒软件：没有检测到杀毒软件");
            }
        });

        task.finished = true;
    }

    function detectFirewall() {
        let result = pluginObj.detectFirewall();

        let task = addDetectTask("防火墙", function () {
            if (result['success']) {
                addNormalResult(detectItems.FIREWALL, "防火墙：设置正常");
            } else {
                addDangerResult(detectItems.FIREWALL, "防火墙：设置异常");
            }
        });

        task.finished = true;
    }

    function detectBankHost(url) {
        let task = addDetectTask("域名解析", false);

        pluginObj.detectHost(url, function (result) {
            task.result = function () {
                if (!result["success"]) {
                    addNormalResult(detectItems.HOST, "域名解析：解析正常");
                } else {
                    addWarningResult(detectItems.HOST, "域名解析：存在劫持风险");
                }
            };
            task.finished = true;
        });
    }

    function detectNavigatorPlugins(title, name) {
        let result = pluginObj.detectNavigatorPlugins(name);
        let task = addDetectTask(title, function () {
            if (result) {
                addNormalResult(detectItems.PLUGINS, title + "：" + name + " 安装正常");
            } else {
                repairPluginList.push(name);

                addDangerResult(detectItems.PLUGINS, title + "：" + name + " 未正确安装");
            }
        });

        task.finished = true;
    }

    function detectCSPDriver(title, name) {
        let task = addDetectTask("USB KEY驱动：" + title, false);
        pluginObj.detectCSPDriver(name, function (result) {
            task.result = function () {
                if (result[0]["csp_state"]) {
                    addNormalResult(detectItems.UKEY_DRIVER, "USB KEY驱动：" + name + " 已安装");
                } else {
                    repairDriverList.push(name);

                    addDangerResult(detectItems.UKEY_DRIVER, "USB KEY驱动：" + name + " 未安装");
                }
            };

            task.finished = true;
        });
    }

    function detectBankWebsite(host, path) {
        let task = addDetectTask('网银链接', false);
        $.ajax({
            url: host + path,
            type: 'GET',
            cache: false,
            timeout: 5000,
            complete: function(response) {
                task.result = function () {
                    if (response.status === 200) {
                        addNormalResult(detectItems.WEBSITE, '网银链接：链接正常');
                    } else {
                        addWarningResult(detectItems.WEBSITE, '网银链接：不可用');
                    }
                };

                task.finished = true;
            }
        });
    }

    function showDetectResult() {
        let count = 0;

        $(".detect-title h3").text("正在为您的网银环境体检...");

        interval = setInterval(function () {
            for (let i = 0; i < detectQueue.length; i++) {
                let task = detectQueue[i];

                if (!task.started) {
                    task.started = true;

                    $(".detect-title p").text("正在检测 第 " + (i + 1) + " 项：" + task.title);

                    break;
                }
            }

            for (let i = 0; i < detectQueue.length; i++) {
                let task = detectQueue[i];

                if (task.finished && !task.displayed) {
                    task.displayed = true;

                    task['result'].call();

                    count++;

                    break;
                }
            }

            if (count === detectQueue.length) {
                showDetectStatistics();

                clearInterval(interval);
            }
        }, 1000);
    }

    function showDetectStatistics() {
        $("#btn-cancel").css("display", "none");
        $("#btn-restart").css("display", "block");

        $(".detect-title h3").text("检测完成");

        if (dangerCount.length > 0) {
            $("#btn-repair").css("display", "block");

            $(".detect-title p").text("一共检测  " + detectQueue.length + " 项，发现 " + dangerCount.length + " 项异常");
        } else {
            $(".detect-title p").text("一共检测  " + detectQueue.length + " 项，未发现异常项");
        }

        isRunning = false;
    }

    function doDetecting() {
        let item;
        isRunning = true;

        $("#btn-cancel").css("display", "block");

        detectSystemInfo();

        detectAntivirus();

        detectFirewall();

        detectBankHost(common.DOMAIN);

        detectBankWebsite(common.BANKURL, 'Timestamp.do');
        
        for (item in common.Plugins) {
            detectNavigatorPlugins(common.Plugins[item].name, common.Plugins[item].description);
        }

        for (item in common.Drivers) {
            detectCSPDriver(common.Drivers[item].name, common.Drivers[item].csp);
        }

        showDetectResult();
    }

    function repairPlugins(title, path, args, element) {
        let task = addRepairTask(title, false);

        pluginObj.repairApplication(filePath + path, args, SMBPlugin.PROGRAM_TYPE.PLUGIN, function (result) {
            task.result = function () {
                if (result["success"]) {
                    element.find(".btn-danger").text("已修复").removeClass("btn-danger").addClass("btn-success");
                } else {
                    toastr.error(result["msg"]);
                }
            };

            task.finished = true;
        });
    }

    function repairDriver(title, path, args, element) {
        let task = addRepairTask(title, false);

        pluginObj.repairApplication(filePath + path, args, SMBPlugin.PROGRAM_TYPE.DRIVER, function (result) {
            task.result = function () {
                if (result["success"]) {
                    element.find(".btn-danger").text("已修复").removeClass("btn-danger").addClass("btn-success");
                } else {
                    toastr.error(result["msg"]);
                }
            };

            task.finished = true;
        });
    }

    function showRepairResult() {
        let count = 0;

        interval = setInterval(function () {
            for (let i = 0; i < repairQueue.length; i++) {
                let task = repairQueue[i];

                if (!task.started) {
                    task.started = true;

                    $(".detect-title h3").text("正在为您修复网银环境...");
                    $(".detect-title p").text("正在修复 第 " + (i + 1) + " 项：" + task.title);
                }
            }

            for (let i = 0; i < repairQueue.length; i++) {
                let task = repairQueue[i];

                if (task.finished && !task.displayed) {
                    task.displayed = true;

                    task['result'].call();

                    count++;

                    break;
                }
            }

            if (count === repairQueue.length) {
                showRepairStatistics(true);

                clearInterval(interval);
            }
        }, 1000);
    }

    function showRepairStatistics() {
        $("#btn-restart").css("display", "block");
        $("#btn-repair").css("display", "none");
        $("#btn-cancel").css("display", "none").text("取消检测");

        $(".detect-title h3").text("全部修复成功");
        $(".detect-title p").text("一共修复 " + repairQueue.length + " 危险项");

        isRunning = false;
    }

    function checkRepairFinished() {
        repairCount++;

        if (repairCount === dangerCount.length) {
            $.confirm({
                text: "请重启您的计算机，以达到完全修复的效果！",
                confirm: function() {
                    let exec = require('child_process').exec;

                    exec("shutdown -r", function (err, stdout, stderr) {
                    });
                },
                confirmButton: "重启",
                cancelButton: "取消"
            });
        }
    }

    function doRepairing() {
        let pluginCount = 0;
        let driverCount = 0;

        $("#btn-restart").css("display", "none");
        $("#btn-repair").css("display", "none");
        $("#btn-cancel").css("display", "block").text("取消修复");

        for (let i = 0; i < dangerCount.length; i++) {
            let element = $(".detect-item-" + dangerCount[i]);

            switch (dangerCount[i]) {
                case detectItems.HOST:
                    break;
                case detectItems.PLUGINS:
                    console.log(repairPluginList[pluginCount]);

                    if (repairPluginList[pluginCount] === common.Plugins.iSecurity.description) {

                    } else if (repairPluginList[pluginCount] === common.Plugins.iSign.description) {

                    } else if (repairPluginList[pluginCount] === common.Plugins.CryptoKit.description) {

                    }

                    driverCount++;

                    break;
                case detectItems.UKEY_DRIVER:
                    console.log(repairDriverList[pluginCount]);

                    if (repairPluginList[pluginCount] === common.Drivers.FT_01.csp) {

                    } else if (repairPluginList[pluginCount] === common.Drivers.FT_02.csp) {

                    } else if (repairPluginList[pluginCount] === common.Drivers.HT_02.csp) {

                    }

                    pluginCount++;

                    break;
            }
        }

        showRepairResult();
    }

    function doResetDetect() {
        isRunning = false;

        normalCount = [];
        warningCount = [];
        dangerCount = [];
        detectQueue = [];
        repairQueue = [];
        repairPluginList = [];
        repairDriverList = [];

        clearInterval(interval);

        $(".danger-list").empty();
        $(".warning-list").empty();
        $(".normal-list").empty();

        $(".danger-title span").text(normalCount.length);
        $(".warning-title span").text(normalCount.length);
        $(".normal-title span").text(normalCount.length);

        $("#btn-cancel").css("display", "block");
        $("#btn-restart").css("display", "none");
        $("#btn-repair").css("display", "none");

        $(".detect-title h3").text("请对您的网银环境进行检测");
        $(".detect-title p").text("");
    }

    $('#btn-cancel').click(function () {
        doResetDetect();
    });

    $('#btn-restart').click(function () {
        doResetDetect();

        doDetecting();
    });

    $('#btn-repair').click(function () {
        doRepairing();
    });

    initSMBPlugin();

    doDetecting();
});